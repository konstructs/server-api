package konstructs.api;

import java.io.Serializable;
import java.util.Arrays;

/**
 * BlockType is a class that holds all relevant information regarding
 * a block's type. Instances of this class is generated when the
 * server is started from the server configuration. It is immutable
 * and serializable.
 */
public final class BlockType implements Serializable {
    public static final String SHAPE_BLOCK = "block";
    public static final String SHAPE_PLANT = "plant";

    public static final String STATE_SOLID = "solid";
    public static final String STATE_LIQUID = "liquid";
    public static final String STATE_GAS = "gas";
    public static final String STATE_PLASMA = "plasma";

    private final int[] faces;
    private final String shape;
    private final boolean obstacle;
    private final boolean transparent;
    private final String state;

    /**
     * Constructs an immutable BlockType.
     * @param faces the texture index for all faces of a BlockType
     * @param shape the shape of the block
     * @param obstacle is this BlockType an obstacle?
     * @param transparent is this BlockType transparent?
     * @deprecated As of API version 0.1.3 (will be removed in 0.2.+)
     *             Replaced by {@link #BlockType(int[], String, boolean, boolean, String)}.
     *             This constructor always sets state to {@link #STATE_SOLID}
     * @see #getFaces()
     * @see #getShape()
     * @see #isObstacle()
     * @see #isTransparent()
     */
    @Deprecated
    public BlockType(int[] faces, String shape, boolean obstacle, boolean transparent) {
        this(faces, shape, obstacle,transparent, STATE_SOLID);
    }

    /**
     * Constructs an immutable BlockType.
     * @param faces the texture index for all faces of a BlockType
     * @param shape the shape of the block
     * @param obstacle is this BlockType an obstacle?
     * @param transparent is this BlockType transparent?
     * @param state the state of the block
     * @see #getFaces()
     * @see #getShape()
     * @see #isObstacle()
     * @see #isTransparent()
     * @see #getState()
     */
    public BlockType(int[] faces, String shape, boolean obstacle, boolean transparent, String state) {
        if(!(shape.equals(SHAPE_BLOCK) || shape.equals(SHAPE_PLANT)))
            throw new IllegalArgumentException("The shape must be either \"" +
                    SHAPE_BLOCK +
                    "\" or \"" +
                    SHAPE_PLANT +
                    "\"");
        if(!(state.equals(STATE_SOLID) || state.equals(STATE_LIQUID) || state.equals(STATE_GAS) || state.equals(STATE_PLASMA)))
            throw new IllegalArgumentException("The state must be either \"" +
                    STATE_SOLID +
                    "\", \""  +
                    STATE_LIQUID +
                    "\", \"" +
                    STATE_GAS +
                    "\" or \"" +
                    STATE_PLASMA +
                    "\"");
        this.faces = faces;
        this.shape = shape;
        this.obstacle = obstacle;
        this.transparent = transparent;
        this.state = state;
    }

    /**
     * Returns the texture indexes for this block type. A texture index
     * is an index generated by the server for the position at which
     * the texture for each of the block's faces is stored.
     * @return the array containing the texture indexes for this block type
     */
    public int[] getFaces() {
        return faces;
    }

    /**
     * Returns the shape of this block type. The shape of the block can
     * currently only be either of <code>BlockType.SHAPE_BLOCK</code> or
     * <code>BlockType.SHAPE_PLANT</code>.
     * @return the shape of the block
     */
    public String getShape() {
        return shape;
    }

    /**
     * Checks if this block type is seen as an obstacle or not. A block with
     * an obstacle type can not be passed through by the player.
     * @return true if this block is an obstacle, otherwise false
     */
    public boolean isObstacle() {
        return obstacle;
    }

    /**
     * Checks if this block type is seen as transparent by the player.
     * @return true if this block is transparent otherwise false
     */
    public boolean isTransparent() {
        return transparent;
    }

    /**
     * Returns the state of this block type. The state of the block
     * can currently be {@link #STATE_SOLID}, {@link #STATE_LIQUID},
     * {@link #STATE_GAS}, {@link #STATE_PLASMA}
     * @return the state of this block type
     */
    public String getState() {
        return state;
    }

    /**
     * Returns a copy with a new value for the faces
     * field.
     * @param faces the new value for faces
     * @return the copy
     * @see #getFaces()
     */
    public BlockType withFaces(int[] faces) {
        return new BlockType(faces, shape, obstacle, transparent, state);
    }

    /**
     * Returns a copy with a new value for the shape
     * field.
     * @param shape the new value for shape
     * @return the copy
     * @see #getShape()
     */
    public BlockType withShape(String shape) {
        return new BlockType(faces, shape, obstacle, transparent, state);
    }

    /**
     * Returns a copy with a new value for the obstacle
     * field.
     * @param obstacle the new value for obstacle
     * @return the copy
     * @see #isObstacle()
     */
    public BlockType withObstacle(boolean obstacle) {
        return new BlockType(faces, shape, obstacle, transparent, state);
    }

    /**
     * Returns a copy with a new value for the transparent
     * field.
     * @param transparent the new value for transparent
     * @return the copy
     * @see #isTransparent()
     */
    public BlockType withTransparent(boolean transparent) {
        return new BlockType(faces, shape, obstacle, transparent, state);
    }

    /**
     * Returns a copy with a new value for the state
     * field.
     * @param state the new value for state
     * @return the copy
     * @see #getState()
     */
    public BlockType withState(String state) {
        return new BlockType(faces, shape, obstacle, transparent, state);
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        BlockType blockType = (BlockType) o;

        if (obstacle != blockType.obstacle) return false;
        if (transparent != blockType.transparent) return false;
        if (!Arrays.equals(faces, blockType.faces)) return false;
        if (!shape.equals(blockType.shape)) return false;
        return state.equals(blockType.state);

    }

    @Override
    public int hashCode() {
        int result = Arrays.hashCode(faces);
        result = 31 * result + shape.hashCode();
        result = 31 * result + (obstacle ? 1 : 0);
        result = 31 * result + (transparent ? 1 : 0);
        result = 31 * result + state.hashCode();
        return result;
    }

    @Override
    public String toString() {
        return "BlockType(" +
                "faces=" + Arrays.toString(faces) +
                ", shape='" + shape + '\'' +
                ", obstacle=" + obstacle +
                ", transparent=" + transparent +
                ", state='" + state + '\'' +
                ')';
    }
}
